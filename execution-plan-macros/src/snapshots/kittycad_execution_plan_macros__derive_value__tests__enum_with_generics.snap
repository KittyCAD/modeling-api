---
source: execution-plan-macros/src/derive_value.rs
expression: formatted
---
impl ::kittycad_execution_plan_traits::Value for Segment {
    fn into_parts(self) -> Vec<::kittycad_execution_plan_traits::Primitive> {
        match self {
            Segment::Line { point } => {
                let mut parts = Vec::new();
                let tag = stringify!(Line).to_owned();
                parts.push(::kittycad_execution_plan_traits::Primitive::from(tag));
                parts.extend(point.into_parts());
                parts
            }
        }
    }

    fn from_parts<I>(
        values: &mut I,
    ) -> Result<(Self, usize), ::kittycad_execution_plan_traits::MemoryError>
    where
        I: Iterator<Item = Option<::kittycad_execution_plan_traits::Primitive>>,
    {
        let (variant_name, mut count) = String::from_parts(values)?;
        match variant_name.as_str() {
            stringify!(Line) => {
                let (point, c) = Point3d::from_parts(values)?;
                count += c;
                Ok((Self::Line { point }, count))
            }
            other => Err(
                ::kittycad_execution_plan_traits::MemoryError::InvalidEnumVariant {
                    expected_type: stringify!(Segment).to_owned(),
                    actual: other.to_owned(),
                    valid_variants: vec!["Line"],
                },
            ),
        }
    }
}

